// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SalesUp.Data.Concrete.Contexts;

#nullable disable

namespace SalesUp.Data.Migrations
{
    [DbContext(typeof(SalesUpDbContext))]
    [Migration("20240415130214_InitialDb")]
    partial class InitialDb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.17");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "cc8a525f-712b-4b88-9360-de670682bad9",
                            RoleId = "cb83dde5-8e10-44f5-be52-bcfafb314bbc"
                        },
                        new
                        {
                            UserId = "dc97c9eb-b284-449e-98f9-0f73d633564a",
                            RoleId = "09dd927a-7351-4009-8be3-d4d1bdb2383a"
                        },
                        new
                        {
                            UserId = "961ed230-e890-457c-9cf7-f6f7578b24a2",
                            RoleId = "5304bb0f-4958-48db-b936-74cbe19e5c77"
                        },
                        new
                        {
                            UserId = "2672cc61-71ed-4625-a0ef-4630ca43c60d",
                            RoleId = "09dd927a-7351-4009-8be3-d4d1bdb2383a"
                        },
                        new
                        {
                            UserId = "2d9a4d8f-2ad4-48a1-a9e2-114decba6551",
                            RoleId = "09dd927a-7351-4009-8be3-d4d1bdb2383a"
                        },
                        new
                        {
                            UserId = "3c8850f4-f23a-498b-828e-37e891a62378",
                            RoleId = "cb83dde5-8e10-44f5-be52-bcfafb314bbc"
                        },
                        new
                        {
                            UserId = "23aca440-47a8-47cc-9f9b-ae16b7a2be98",
                            RoleId = "5304bb0f-4958-48db-b936-74cbe19e5c77"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SalesUp.Entity.ContactUs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("SalesUp.Entity.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CompanyName")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("SalesUp.Entity.Identity.Role", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "5304bb0f-4958-48db-b936-74cbe19e5c77",
                            Description = "Yönetici haklarını taşıyan rol.",
                            Name = "SuperAdmin",
                            NormalizedName = "SUPERADMIN"
                        },
                        new
                        {
                            Id = "09dd927a-7351-4009-8be3-d4d1bdb2383a",
                            Description = "Satış Temsilcisi haklarını taşıyan rol.",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "cb83dde5-8e10-44f5-be52-bcfafb314bbc",
                            Description = "Müşteri haklarını taşıyan rol.",
                            Name = "Customer",
                            NormalizedName = "CUSTOMER"
                        });
                });

            modelBuilder.Entity("SalesUp.Entity.Identity.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateofBirth")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<int>("SubscriptionId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("SubscriptionId");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "cc8a525f-712b-4b88-9360-de670682bad9",
                            AccessFailedCount = 0,
                            Address = "TaşMektep Caddesi Ömerpaşa Sokak No:3 D:12 Kadıköy",
                            City = "İstanbul",
                            ConcurrencyStamp = "b39652d1-6182-4321-adc3-07981170e670",
                            DateofBirth = new DateTime(1992, 7, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "deryademir@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Derya",
                            Gender = "Kadın",
                            LastName = "Demir",
                            LockoutEnabled = false,
                            NormalizedEmail = "DERYADEMIR@GMAIL.COM",
                            NormalizedUserName = "DERYADEMIR",
                            PasswordHash = "AQAAAAIAAYagAAAAEEc5dHXfUQvh8jrtHkD2p1WUMR55P/ucpQaRkQtU0OtT+/xR6DqrZRqK6y8MrZoQnw==",
                            PhoneNumber = "5547659843",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2f734353-6130-40d9-bcd9-9e2a9a58f296",
                            SubscriptionId = 2,
                            TwoFactorEnabled = false,
                            UserName = "deryademir"
                        },
                        new
                        {
                            Id = "dc97c9eb-b284-449e-98f9-0f73d633564a",
                            AccessFailedCount = 0,
                            Address = "TaşMektep Caddesi Ömerpaşa Sokak No:3 D:12 Kadıköy",
                            City = "İstanbul",
                            ConcurrencyStamp = "707c7d13-f5cf-47a6-89d4-a57ef8523afe",
                            DateofBirth = new DateTime(1990, 3, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "kadirdevran@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Kadir",
                            Gender = "Erkek",
                            LastName = "Devran",
                            LockoutEnabled = false,
                            NormalizedEmail = "KADIRDEVRAN@GMAIL.COM",
                            NormalizedUserName = "KADIRDEVRAN",
                            PasswordHash = "AQAAAAIAAYagAAAAEFx06aZsk9VzgQs2+JqRk3iKwkHXKr0eIjuPhd84/mSVzfe5yckX0Npm9G4zbJnf6w==",
                            PhoneNumber = "5341459340",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "11e0b2e8-1eb7-4617-9e4d-9ff55f7bc634",
                            SubscriptionId = 2,
                            TwoFactorEnabled = false,
                            UserName = "kadirdevran"
                        },
                        new
                        {
                            Id = "961ed230-e890-457c-9cf7-f6f7578b24a2",
                            AccessFailedCount = 0,
                            Address = "TaşMektep Caddesi Ömerpaşa Sokak No:3 D:12 Kadıköy",
                            City = "İstanbul",
                            ConcurrencyStamp = "d354e8d6-5585-4f87-9f18-1eeae876fda1",
                            DateofBirth = new DateTime(1983, 4, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ferdabayar@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Ferda",
                            Gender = "Erkek",
                            LastName = "Bayar",
                            LockoutEnabled = false,
                            NormalizedEmail = "FERDABAYAR@GMAIL.COM",
                            NormalizedUserName = "FERDABAYAR",
                            PasswordHash = "AQAAAAIAAYagAAAAEHUZzobUjw2y4vO1c8rJCB9ttoLXR0ihMw2cNB1xGJuY1VFcTW7s13It7QITkXk+5g==",
                            PhoneNumber = "5053211815",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "79c819a7-563e-4b65-abec-b9f65c3e58e6",
                            SubscriptionId = 3,
                            TwoFactorEnabled = false,
                            UserName = "ferdabayar"
                        },
                        new
                        {
                            Id = "2672cc61-71ed-4625-a0ef-4630ca43c60d",
                            AccessFailedCount = 0,
                            Address = "TaşMektep Caddesi Ömerpaşa Sokak No:3 D:12 Kadıköy",
                            City = "İstanbul",
                            ConcurrencyStamp = "7680aebc-877f-4768-8722-66e2e2320b86",
                            DateofBirth = new DateTime(1970, 9, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "niluferozdemir@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Nilüfer",
                            Gender = "Kadın",
                            LastName = "Özdemir",
                            LockoutEnabled = false,
                            NormalizedEmail = "NILUFEROZDEMIR@GMAIL.COM",
                            NormalizedUserName = "NILUFEROZDEMIR",
                            PasswordHash = "AQAAAAIAAYagAAAAEOtivzYqsV4eMm3r5yLvignJ4JqFw7k0of7ywLGXYqfEECvefPPBkFnC8f3JnMpBTg==",
                            PhoneNumber = "5383458090",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "5574ac89-c560-4924-951d-2ef0efb025b1",
                            SubscriptionId = 2,
                            TwoFactorEnabled = false,
                            UserName = "niluferozdemir"
                        },
                        new
                        {
                            Id = "2d9a4d8f-2ad4-48a1-a9e2-114decba6551",
                            AccessFailedCount = 0,
                            Address = "TaşMektep Caddesi Ömerpaşa Sokak No:3 D:12 Kadıköy",
                            City = "İstanbul",
                            ConcurrencyStamp = "060b82d1-b9ac-4e94-9656-46612f576c44",
                            DateofBirth = new DateTime(1989, 3, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "canyener@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Can",
                            Gender = "Erkek",
                            LastName = "Yener",
                            LockoutEnabled = false,
                            NormalizedEmail = "CANYENER@GMAIL.COM",
                            NormalizedUserName = "CANYENER",
                            PasswordHash = "AQAAAAIAAYagAAAAEA01uAq2QWC06ZNxnRiEAf3gggWgq4K4kclmP+zPmdSuTZLiCAYj2iIlkmQJSXiMIw==",
                            PhoneNumber = "5350931264",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e572bbc0-f15f-498f-abf8-3262d99f62a9",
                            SubscriptionId = 3,
                            TwoFactorEnabled = false,
                            UserName = "canyener"
                        },
                        new
                        {
                            Id = "3c8850f4-f23a-498b-828e-37e891a62378",
                            AccessFailedCount = 0,
                            Address = "TaşMektep Caddesi Ömerpaşa Sokak No:3 D:12 Kadıköy",
                            City = "İstanbul",
                            ConcurrencyStamp = "a0407e04-0f27-41cf-8e67-6d3aa5752e6b",
                            DateofBirth = new DateTime(1993, 4, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "ecesaruhan@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Ece",
                            Gender = "Kadın",
                            LastName = "Saruhan",
                            LockoutEnabled = false,
                            NormalizedEmail = "ECESARUHANGMAIL.COM",
                            NormalizedUserName = "ECESARUHAN",
                            PasswordHash = "AQAAAAIAAYagAAAAEAxVEr0pQCwHhai3fSlRpv61QvlemqhmPZBrWNP+89teq3RzQjfZPO1cmtueRMNf/Q==",
                            PhoneNumber = "5336713434",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "10d3fcb9-57fc-43f3-bd95-2bf1cdebb891",
                            SubscriptionId = 2,
                            TwoFactorEnabled = false,
                            UserName = "ecesaruhan"
                        },
                        new
                        {
                            Id = "23aca440-47a8-47cc-9f9b-ae16b7a2be98",
                            AccessFailedCount = 0,
                            Address = "TaşMektep Caddesi Ömerpaşa Sokak No:3 D:12 Kadıköy",
                            City = "İstanbul",
                            ConcurrencyStamp = "419b5125-051a-431f-bae8-0012351cb905",
                            DateofBirth = new DateTime(1980, 2, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "denizalkan@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Deniz",
                            Gender = "Kadın",
                            LastName = "Alkan",
                            LockoutEnabled = false,
                            NormalizedEmail = "DENIZALKAN@GMAIL.COM",
                            NormalizedUserName = "DENIZALKAN",
                            PasswordHash = "AQAAAAIAAYagAAAAENW6XnElS/89L5BjuPfhBXYwuYPvxZapikjKEiotkW2g0SJC/xc01/u331dLElQ6vw==",
                            PhoneNumber = "535090405",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "05f7f68f-1c18-49da-9d66-cee268bd716e",
                            SubscriptionId = 1,
                            TwoFactorEnabled = false,
                            UserName = "denizalkan"
                        });
                });

            modelBuilder.Entity("SalesUp.Entity.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("FromId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FromName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsRead")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RelatedId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("SendingDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ToId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ToName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("SalesUp.Entity.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ConversationId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("OrderNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PaymentId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("PaymentType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("SalesUp.Entity.OrderDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Duration")
                        .HasColumnType("INTEGER");

                    b.Property<int>("OrderId")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.Property<int>("SubscriptionId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("SubscriptionId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("SalesUp.Entity.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Properties")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("TEXT");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("SalesUp.Entity.STask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("SalesUp.Entity.Sale", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Amount")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CompletedDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Sales");
                });

            modelBuilder.Entity("SalesUp.Entity.Subscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("Duration")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DurationUnit")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("real");

                    b.Property<int>("SubscriptionType")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Subscriptions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2024, 4, 15, 16, 2, 14, 669, DateTimeKind.Local).AddTicks(970),
                            Description = "Her ay düzenli olarak ödenecek olan abonelik sistemidir.",
                            Duration = 6,
                            DurationUnit = "Ay",
                            IsActive = true,
                            Name = "6 Aylık Abonelik",
                            Price = 1000m,
                            SubscriptionType = 0,
                            UpdateDate = new DateTime(2024, 4, 15, 16, 2, 14, 669, DateTimeKind.Local).AddTicks(1030)
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2024, 4, 15, 16, 2, 14, 669, DateTimeKind.Local).AddTicks(1040),
                            Description = "Her ay düzenli olarak ödenecek olan abonelik sistemidir.",
                            Duration = 12,
                            DurationUnit = "Ay",
                            IsActive = true,
                            Name = "12 Aylık Abonelik",
                            Price = 800m,
                            SubscriptionType = 1,
                            UpdateDate = new DateTime(2024, 4, 15, 16, 2, 14, 669, DateTimeKind.Local).AddTicks(1040)
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2024, 4, 15, 16, 2, 14, 669, DateTimeKind.Local).AddTicks(1050),
                            Description = "Her ay düzenli olarak ödenecek olan abonelik sistemidir.",
                            Duration = 24,
                            DurationUnit = "Ay",
                            IsActive = true,
                            Name = "24 Aylık Abonelik",
                            Price = 500m,
                            SubscriptionType = 2,
                            UpdateDate = new DateTime(2024, 4, 15, 16, 2, 14, 669, DateTimeKind.Local).AddTicks(1060)
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("SalesUp.Entity.Identity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("SalesUp.Entity.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("SalesUp.Entity.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("SalesUp.Entity.Identity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SalesUp.Entity.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("SalesUp.Entity.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SalesUp.Entity.Customer", b =>
                {
                    b.HasOne("SalesUp.Entity.Identity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SalesUp.Entity.Identity.User", b =>
                {
                    b.HasOne("SalesUp.Entity.Subscription", "Subscription")
                        .WithMany("Users")
                        .HasForeignKey("SubscriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subscription");
                });

            modelBuilder.Entity("SalesUp.Entity.Order", b =>
                {
                    b.HasOne("SalesUp.Entity.Identity.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SalesUp.Entity.Identity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SalesUp.Entity.OrderDetail", b =>
                {
                    b.HasOne("SalesUp.Entity.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SalesUp.Entity.Subscription", "Subscription")
                        .WithMany()
                        .HasForeignKey("SubscriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Subscription");
                });

            modelBuilder.Entity("SalesUp.Entity.Product", b =>
                {
                    b.HasOne("SalesUp.Entity.Identity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SalesUp.Entity.STask", b =>
                {
                    b.HasOne("SalesUp.Entity.Identity.User", "User")
                        .WithMany("STaskList")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SalesUp.Entity.Sale", b =>
                {
                    b.HasOne("SalesUp.Entity.Identity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SalesUp.Entity.Identity.User", b =>
                {
                    b.Navigation("STaskList");
                });

            modelBuilder.Entity("SalesUp.Entity.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("SalesUp.Entity.Subscription", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
